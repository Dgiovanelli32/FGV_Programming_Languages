{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A2 de Introdução à computação – 13/06/2016\n",
    "--\n",
    "Professor: Renato Rocha Souza  \n",
    "--"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Nome do Aluno(a):HENRIQUE NASCIMENTO MUNIZ DE ANDRADE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "meu_nome = input('Entre com o seu nome completo: Henrique ascimento  ')\n",
    "print('Olá, {}!'.format(meu_nome))\n",
    "print('Bom trabalho!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Somente estes módulos podem ser importados para a realização das questões\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import requests\n",
    "from bs4 import BeautifulSoup as bs\n",
    "import string as st\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Questão 1 (1,5 pontos)  \n",
    "\n",
    "Mostre graficamente que $ \\sin ^2 x + \\cos^2 x = 1. $  \n",
    "\n",
    "Dica: para melhor visualização do gráfico, mude a escala dos eixos com $plt.axis([x_{min},x_{max},y_{min},y_{max}])$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x74a17d0>]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nHgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x5eb60d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = 0\n",
    "c = []\n",
    "while a<2*(np.pi):\n",
    "    c.append(a*np.pi)\n",
    "    a = a + 0.01\n",
    "plt.plot(np.cos(c)**2+np.sin(c)**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Questão 2 (2.5 pontos)  \n",
    "\n",
    "Partindo do código abaixo, escreva comandos para realizar as seguintes tarefas:\n",
    "- Identificar os candidatos a nomes próprios do texto e a frequência com que aparecem;\n",
    "- Identificar as 5 palavras mais comuns;\n",
    "- #Identificar os tritongos;\n",
    "- Salvar os resultados em um arquivo chamado \"respostas_q2.txt\" no computador"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "url = 'http://norvig.com/big.txt'\n",
    "page = requests.get(url)\n",
    "html = page.text\n",
    "sopa = bs(html, \"lxml\")\n",
    "texto = sopa.text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "texto = sopa.text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "texto = texto[0:8634]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Identificar os candidatos a nomes próprios do texto e a frequência com que aparecem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "for i in st.digits:\n",
    "    t = texto.replace(i,'')\n",
    "for i in st.punctuation:\n",
    "    t = texto.replace(i,'')\n",
    "c = t.split()\n",
    "r = set(c)\n",
    "candidatos=[]\n",
    "for i in r:\n",
    "    if i.istitle()==True:\n",
    "        candidatos.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "m = []\n",
    "for t in c:\n",
    "    if t.istitle()==True:\n",
    "        m.append(t)\n",
    "primeira = []\n",
    "for i in candidatos:\n",
    "    a = 0\n",
    "    for j in m:\n",
    "        if i == j:\n",
    "            a = a+1 \n",
    "            m.remove(i)\n",
    "    primeira.append((i,a))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Identificar as 5 palavras mais comuns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for i in st.digits:\n",
    "    texto = texto.replace(i,'')\n",
    "for i in st.punctuation:\n",
    "    texto = texto.replace(i,'')\n",
    "o = texto.split()\n",
    "r = set(o)\n",
    "frequencias=[]\n",
    "FREC=[]\n",
    "palavras=[]\n",
    "for i in r:\n",
    "    a = 0\n",
    "    for y in o:\n",
    "        if i == y:\n",
    "            a = a+1\n",
    "            o.remove(i)\n",
    "    frequencias.append(a)\n",
    "    FREC.append(a)\n",
    "    palavras.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "w = max(frequencias)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 391,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[41, 31, 30, 25, 22]"
      ]
     },
     "execution_count": 391,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = []\n",
    "while len(d)<5:\n",
    "    if len(d)==0:\n",
    "        w = max(frequencias)\n",
    "    else:\n",
    "        frequencias.remove(w)\n",
    "        w = w = max(frequencias)\n",
    "    for a in range(len(frequencias)):\n",
    "        if w == frequencias[a]:\n",
    "            d.append(frequencias[a])\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "53"
      ]
     },
     "execution_count": 392,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(FREC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "segunda = []\n",
    "for i in d:\n",
    "    for r in range(len(frequencias)):\n",
    "        if i==FREC[r]:\n",
    "            segunda.append(palavras[r])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'I', 'and', 'of', 'the'}"
      ]
     },
     "execution_count": 395,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "segunda = set(terceira)\n",
    "segunda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Identificar os tritongos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "texto = sopa.text\n",
    "texto = texto[0:8634]\n",
    "for i in st.digits:\n",
    "    t = texto.replace(i,'')\n",
    "for i in st.punctuation:\n",
    "    t = t.replace(i,'')\n",
    "for i in 'aeiouAEIOU':\n",
    "    t = t.replace(i,'@')\n",
    "a = 0\n",
    "k=[]\n",
    "for i in t.split():\n",
    "    if '@@@' in i:\n",
    "        k.append(a)\n",
    "    a=a+1\n",
    "texto = texto[0:8634]\n",
    "for i in st.digits:\n",
    "    t = texto.replace(i,'')\n",
    "for i in st.punctuation:\n",
    "    t = t.replace(i,'')\n",
    "terceira=[]\n",
    "for r in k:\n",
    "    terceira.append(t.split()[r])\n",
    "#A POSIÇÃO DOS TRITONGOS NO LISTA t.split()  ESTÁ NA LISTA k"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Salvar os resultados em um arquivo chamado \"respostas_q2.txt\" no computador"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 390,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "arquivo = open('respostas_q2.txt', 'a')\n",
    "arquivo.write('RESPOSTA DA PRIMEIRA PARTE\\n')\n",
    "arquivo.write(str(primeira))\n",
    "arquivo.write('\\n')\n",
    "arquivo.write('RESPOSTA DA SEGUNDA PARTE\\n')\n",
    "arquivo.write(str(segunda))\n",
    "arquivo.write('\\n')\n",
    "arquivo.write('RESPOSTA DA TERCEIRA PARTE\\n')\n",
    "arquivo.write(str(terceira))\n",
    "arquivo.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "arquivo = open('respostas_q2.txt', 'w')\n",
    "arquivo.write('')\n",
    "arquivo.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 377,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arquivo.write('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 378,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arquivo.write(str(segunda))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 379,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arquivo.write('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 380,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arquivo.write(str(terceira))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "arquivo.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Questão 3 (3 pontos)  \n",
    "\n",
    "Uma permutação é um arranjo ordenado de objetos. Por exemplo, $ 3124 \\ $ é uma das possíveis permutações dos dígitos $1, 2, 3$ e $4$. Se todas as permutações são ordenadas numericamente, chamamos a este arranjo de ordem lexicográfica. As permutações lexicográficas de $0, 1$ e $2$ são:  \n",
    "\n",
    "$012\\;021\\;102\\;120\\;201\\;210$    \n",
    "\n",
    "Qual o milionésimo elemento da ordenação lexicográfica dos dígitos $0, 1, 2, 3, 4, 5, 6, 7, 8$ e $9$?   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "r =[]\n",
    "digitos ='0123456789'\n",
    "for i in digitos:\n",
    "    digitos ='0123456789'\n",
    "    digitos = digitos.replace(i,'')\n",
    "    for j  in digitos:\n",
    "        digitos ='0123456789'\n",
    "        digitos = digitos.replace(j,'')\n",
    "        digitos = digitos.replace(i,'')\n",
    "        for k  in digitos:\n",
    "            digitos ='0123456789'\n",
    "            digitos = digitos.replace(j,'')\n",
    "            digitos = digitos.replace(i,'')\n",
    "            digitos = digitos.replace(k,'')\n",
    "            for t in digitos:\n",
    "                digitos ='0123456789'\n",
    "                digitos = digitos.replace(j,'')\n",
    "                digitos = digitos.replace(i,'')\n",
    "                digitos = digitos.replace(k,'')\n",
    "                digitos = digitos.replace(t,'')\n",
    "                for v in digitos:\n",
    "                    digitos ='0123456789'\n",
    "                    digitos = digitos.replace(j,'')\n",
    "                    digitos = digitos.replace(i,'')\n",
    "                    digitos = digitos.replace(k,'')\n",
    "                    digitos = digitos.replace(t,'')\n",
    "                    digitos = digitos.replace(v,'')\n",
    "                    for u in digitos:\n",
    "                        digitos ='0123456789'\n",
    "                        digitos = digitos.replace(j,'')\n",
    "                        digitos = digitos.replace(i,'')\n",
    "                        digitos = digitos.replace(k,'')\n",
    "                        digitos = digitos.replace(t,'')\n",
    "                        digitos = digitos.replace(v,'')\n",
    "                        digitos = digitos.replace(u,'')\n",
    "                        for ç in digitos:\n",
    "                            digitos ='0123456789'\n",
    "                            digitos = digitos.replace(j,'')\n",
    "                            digitos = digitos.replace(i,'')\n",
    "                            digitos = digitos.replace(k,'')\n",
    "                            digitos = digitos.replace(t,'')\n",
    "                            digitos = digitos.replace(v,'')\n",
    "                            digitos = digitos.replace(u,'')\n",
    "                            digitos = digitos.replace(ç,'')\n",
    "                            for b in digitos:\n",
    "                                digitos ='0123456789'\n",
    "                                digitos = digitos.replace(j,'')\n",
    "                                digitos = digitos.replace(i,'')\n",
    "                                digitos = digitos.replace(k,'')\n",
    "                                digitos = digitos.replace(t,'')\n",
    "                                digitos = digitos.replace(v,'')\n",
    "                                digitos = digitos.replace(u,'')\n",
    "                                digitos = digitos.replace(ç,'')\n",
    "                                digitos = digitos.replace(b,'')\n",
    "                                for w in digitos:\n",
    "                                    digitos ='0123456789'\n",
    "                                    digitos = digitos.replace(j,'')\n",
    "                                    digitos = digitos.replace(i,'')\n",
    "                                    digitos = digitos.replace(k,'')\n",
    "                                    digitos = digitos.replace(t,'')\n",
    "                                    digitos = digitos.replace(v,'')\n",
    "                                    digitos = digitos.replace(u,'')\n",
    "                                    digitos = digitos.replace(ç,'')\n",
    "                                    digitos = digitos.replace(b,'')\n",
    "                                    digitos = digitos.replace(w,'')\n",
    "                                    for a in digitos:\n",
    "                                        digitos ='0123456789'\n",
    "                                        digitos = digitos.replace(j,'')\n",
    "                                        digitos = digitos.replace(i,'')\n",
    "                                        digitos = digitos.replace(k,'')\n",
    "                                        digitos = digitos.replace(t,'')\n",
    "                                        digitos = digitos.replace(v,'')\n",
    "                                        digitos = digitos.replace(u,'')\n",
    "                                        digitos = digitos.replace(ç,'')\n",
    "                                        digitos = digitos.replace(b,'')\n",
    "                                        digitos = digitos.replace(w,'')\n",
    "                                        digitos = digitos.replace(a,'')\n",
    "                                        r.append(i+j+k+t+v+u+ç+b+w+a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2783915460'"
      ]
     },
     "execution_count": 397,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r[999999]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Questão 4 (3 pontos) \n",
    "\n",
    "Implemente em Python uma classe chamada “Drone” com as seguintes propriedades:  \n",
    "- Quando instanciado, tem bateria carregada e está na posição $(x=0,y=0,z=0)$ metros;  \n",
    "- Possui bateria para duração 20 minutos;  \n",
    "- Consegue andar 1 m/s na vertical e 2 m/s na horizontal;  \n",
    "- Possui o metodo “voar”, que recebe uma coordenada de destino $(x_1,y_1)$. Esse método calcula a distância a navegar e avalia se o drone possui energia para chegar nestas coordenadas.  \n",
    "- Possui métodos para carregar a bateria, dizer a autonomia da bateria (em segundos), dizer a distância percorrida desde a última carga e a distância total percorrida desde que foi instanciado.  \n",
    "- Possui um método para dizer a coordenada atual\n",
    "\n",
    "OBS: Considere que o drone sempre ascende verticalmente até 20m antes de se deslocar horizontalmente, e percorre a mesma distância verticalmente. A distância percorrida na horizontal é o menor caminho entre as coordenadas de origem e destino. Use a fórmula: $$distância = \\sqrt{(x_1-x_0)^2 + (y_1-y_0)^2}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "class drone:\n",
    "    def __init__(self):\n",
    "        self.posição = (0,0,0)\n",
    "        self.bateria = 100\n",
    "        self.autonomia = 1200\n",
    "        self.m_total = 0\n",
    "        self.m_parcial = 0\n",
    "    def voar(self, p):\n",
    "        x0=self.posição[0] \n",
    "        y0 =self.posição[1] \n",
    "        dx = p[0] - x0 \n",
    "        dy = p[1] - y0\n",
    "        if (np.sqrt(dx**2 + dy**2)*2+40)/1200<=self.bateria:\n",
    "            self.posição = (p[0]+,p[1],0)\n",
    "            self.bateria = self.bateria-(np.sqrt(dx**2 + dy**2)*2+40)/1200\n",
    "            self.autonomia = self.autonomia -(np.sqrt(dx**2 + dy**2)*2+40)\n",
    "            self.m_total = self.m_total + np.sqrt(dx**2 + dy**2)+40\n",
    "            self.m_parcial = self.m_parcial + np.sqrt(dx**2 + dy**2)+40\n",
    "        else:\n",
    "            print('TA MUITO LONGE')\n",
    "    def carregar(self):\n",
    "        self.bateria = 100\n",
    "        self.parcial = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Questão Bônus (0,5 pontos)  \n",
    "\n",
    "O problema de Monty Hall, também conhecido por paradoxo de Monty Hall é um problema matemático e paradoxo que surgiu a partir de um concurso televisivo dos Estados Unidos chamado \"Let’s Make a Deal\", exibido na década de 1970. O jogo consiste no seguinte: Monty Hall (o apresentador) apresentava 3 portas aos concorrentes, sabendo que atrás de uma delas está um carro (prêmio bom) e que as outras têm prêmios de pouco valor.\n",
    "\n",
    "- Na 1ª etapa o concorrente escolhe uma porta (que ainda não é aberta);  \n",
    "- Em seguida, Monty abre uma das outras duas portas que o concorrente não escolheu, sabendo de antemão que o carro não se encontra na porta que abrirá;  \n",
    "- Agora com duas portas apenas para escolher — pois uma delas já se viu, na 2ª etapa, que não tinha o prêmio — e sabendo que o carro está atrás de uma delas, o concorrente tem que se decidir se permanece com a porta que escolheu no início do jogo e abre-a ou se muda para a outra porta que ainda está fechada para então a abrir.  \n",
    "\n",
    "Demonstre graficamente que é mais provável ganhar o prêmio se trocar de porta do que se não o fizer. Quais as probabilidade de acertar, em ambos os casos?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Auto-avaliação (0,5 pontos)  \n",
    "Escreva sua auto-avaliação (mínimo de 3 linhas) e atribua a esta um valor entre 0 e 0,5, levando em consideração o aproveitamento na disciplina.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
